
==============================================================================================

                        Tortoise Naming Convention and Code Guidelines                        

==============================================================================================

While we strive to follow the Conventions set in the MSDN such as those listed below.
We do break away in a few cases and thus the full details regarding our naming convention are
detailed.

Reference documents:
https://msdn.microsoft.com/en-us/library/ms229045(v=vs.100).aspx
https://msdn.microsoft.com/en-us/library/vstudio/ms229043(v=vs.100).aspx
https://msdn.microsoft.com/en-us/library/vstudio/ms229036(v=vs.100).aspx
https://msdn.microsoft.com/en-us/library/vstudio/ms229059(v=vs.100).aspx
https://msdn.microsoft.com/en-us/library/vstudio/ms229035(v=vs.100).aspx



All public, internal, and protected Classes, Method, Property, Delegates, and Enumerators 
naming will use Pascal Casing. Only alphabetic characters should be used for public accessible 
names and any other characters should be avoided. Numbers should be avoided unless the name 
which describes the object is expressed as a number, e.g. 2D.
e.g.:
Good:
public class MyClass 
{
    public int Property { get; set; }
	public void MyMethod()
	{
	}
	public Vector2D ConvertTo2DVector()
	{
	}
}

Bad:
public class my_class
{
    public int property {get;set}
	public void my_666_Method()
	{
	}
}

==============================================================================================

All private named items need to be evaluated as to why they are private and not internal or 
protected. Typically only internal values for Properties should be private and should only be 
access by the related property. This allows overwriting of the property in sub classes while
removing any ambiguity of the base class functions writing to the private variable and not the 
property.  They should be written using Camel Case and should begin with an underscore to
differentiate them from local or visible named items. This is a personal design decision 
despite the wide distain to underscore prefixed names. This is not an alternative to "this." 
but visually differentiates private named items from local and visible items. 
e.g.:
private int _privateValue;
protected void MethodA(int valueA)
{
  int localValue;
  localValue = valueA + valueA;
  _privateValue = _methodB(localValue);
}
private int _methodB(int valueB)
{
  return valueB + 5;
}

==============================================================================================

The name needs to briefly describe what it does and should at most consist of 4 words or 20 
characters. If you exceed this you may need to consider simplifying the name or simplifying 
what it does. Remember that you simply need to be skim over the code to get an idea of what
the code does. Any further details can go into the documentation.

e.g.:
Good:
GetDistance()
IsDead
GetEnemyMaxMoves()

Bad:
GetDistanceToProvidedPointOrEntitiy()
IsTheEntityDead
aaaaa_counts_the_moves()

==============================================================================================

Localized variables should be limited to those required by the function and excessive variable
creation should be reevaluated. The creation and destruction of an instanced object within a 
method should be evaluated and avoided if possible. We should avoid allocating space in the
heap when possible as this can be costly performance wise. While the .NET JIT system can make
many optimizations, a jeweler can only polish a ball of BS so much.

Localized variables and parameters should use a Camel Case naming scheme.
==============================================================================================

Code logic should not become to complex and should never go beyond 4 levels deep within a 
single method. Any functions longer than 60 columns or about what fits on a 1200 tall screen
should be split up if possible.  This helps keep methods short short and readable. We should 
not however work to split everything into separate functions for each line or 2 of code. Code
should be split up where the logic boundaries are.

For example, the following function from the Linux Source reaches 4 levels deep and is still 
short and to the point.
http://git.io/NtF7


As the above function also makes a good point of the next topic which is documentation. All
named items in a class should be documented via the XML documentation format which can be 
created with three forward slashes (///). This should provide a summary of what the function
does.

Code on its own should be enough for anyone to review it and know what is going on. This
includes proper variable names and avoiding pointless Lambda functions, Anonymous functions
and Linq Statements which can add un-needed levels of logic and complicity.  If a block of 
logic can't be understood based on its context is it a logic boundary and should it go into 
its own function? If not then a comment should be added explaining "Why" it is doing that.
We can already see what the code is doing so any comment which simply restated it in a 
different way is pointless.

For example the following comment is trash:

//Create a new Renderer from our main window.
_renderer = _graphics.Output.Create2DRenderer(_mainScreen);

Better but still basically says whats happening:
//Set up our renderable texture instance for the screen chain swap
_renderer = _graphics.Output.Create2DRenderer(_mainScreen);

Best is to rename the variables:
_rendererTexture = _graphics.Output.Create2DRenderer(_mainScreenChainSwap);


In the event that the code its self becomes hard to follow or understand what it does
even with variable names or function names properly provided then further documentation as to
why it is doing what it does should be provided.

For instance from another unrelated project, we have the following code which is quite 
almost impossible to understand why it is doing what it does without extensive review:

        var s = Value << StartBit;
        var p = 0xFFFFFFFF >>> (32 - Width);
        p = p << StartBit;
        s = s & p;
        var q = BitArray[WorkingByte];
        p = ~p;
        q = q & p;
        q = q | s;
        BitArray[WorkingByte] = q;

        s = s >>> 8;
        p = (~p) >>> 8;
        if (p & s) {
            if (WorkingByte + 1 > length)
                return;
            /* If we hit the end of the array we can just discard the data...?
               Should probably throw an error...*/
            this._sb(s, (StartBit + Width) - 8, ++WorkingByte, 0);




In the case where we rename the variables to once which we can read the flow of logic becomes
much clearer. 

        var source = Value << StartBit;
        var bitmask = 0xFFFFFFFF >>> (32 - Width);
        bitmask = bitmask << StartBit;
        source = source & bitmask;
        var dest = BitArray[WorkingByte];
        bitmask = ~bitmask;
        dest = dest & bitmask;
        dest = dest | source;
        BitArray[WorkingByte] = dest;

        source = source >>> 8;
        bitmask = (~bitmask) >>> 8;
        if (bitmask & source) {
            if (WorkingByte + 1 > length)
                return;
            /* If we hit the end of the array we can just discard the data...?
               Should probably throw an error...*/
            this._sb(source, (StartBit + Width) - 8, ++WorkingByte, 0);


If you are still not sure then the following gets to my point. We can see we are creating a 
bitmask and ANDing it against the source which results in the data we want. We then invert 
that and AND the inverted mask against the destination. This clears the bits we just selected 
beforehand. Once that is done we OR the source and destination to save the source.

This may still confuse some people so as an example, the following URL links to a full 70 line
comment which details what the function above does. We should avoid huge blogs of comments if
possible as large blocks of redundant information or information which can easily be obtained 
from the code its self is a waste of time.

http://git.io/NtbL


As the example shows, all of the explanation occurs before the code. We should avoid littering
the code with comments as this not only makes it harder to read but if a comment prefixes
each line of code, we are at that point describing "What" the code does and not "Why" it does
it.